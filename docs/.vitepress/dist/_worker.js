var Oe=Object.create;var I=Object.defineProperty;var Ae=Object.getOwnPropertyDescriptor;var Ie=Object.getOwnPropertyNames;var Ue=Object.getPrototypeOf,Ne=Object.prototype.hasOwnProperty;var We=r=>I(r,"__esModule",{value:!0});var p=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports);var De=(r,t,n,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of Ie(t))!Ne.call(r,s)&&(n||s!=="default")&&I(r,s,{get:()=>t[s],enumerable:!(e=Ae(t,s))||e.enumerable});return r},U=(r,t)=>De(We(I(r!=null?Oe(Ue(r)):{},"default",!t&&r&&r.__esModule?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);var G=p((mt,M)=>{var _e=async r=>{let t=r.headers.get("content-type");r.content=void 0;try{t&&t.includes("application/json")&&(r.content=await r.json())}catch{}};M.exports={withContent:_e}});var H=p((gt,V)=>{var ze=r=>{r.cookies={};try{r.cookies=(r.headers.get("Cookie")||"").split(/;\s*/).map(t=>t.split("=")).reduce((t,[n,e])=>(t[n]=e,t),{})}catch{}};V.exports={withCookies:ze}});var q=p((ht,B)=>{var Fe=r=>{for(let t in r.params||{})r[t]=r.params[t]};B.exports={withParams:Fe}});var K=p((ut,X)=>{X.exports={...G(),...H(),...q()}});var J=p((dt,Z)=>{var Le=(r="text/plain; charset=utf-8")=>(t,n={})=>{let{headers:e={},...s}=n;return typeof t=="object"?new Response(JSON.stringify(t),{headers:{"Content-Type":r,...e},...s}):new Response(t,n)};Z.exports={createResponseType:Le}});var T=p((ft,Q)=>{var{createResponseType:Me}=J(),Ge=Me("application/json; charset=utf-8");Q.exports={json:Ge}});var N=p((xt,Y)=>{var{json:Ve}=T(),He=(r=500,t="Internal Server Error.")=>Ve({...typeof t=="object"?t:{status:r,error:t}},{status:r});Y.exports={error:He}});var te=p((wt,ee)=>{var{error:Be}=N(),qe=(r="Not found.")=>Be(404,r);ee.exports={missing:qe}});var se=p((Rt,re)=>{var{json:Xe}=T(),Ke=(r,t)=>t?Xe({...typeof t=="object"?t:{status:r,message:t}},{status:r}):new Response(null,{status:r});re.exports={status:Ke}});var ne=p((vt,ae)=>{var Ze=(r,t={})=>new Response(r,t);ae.exports={text:Ze}});var W=p((bt,oe)=>{oe.exports={...N(),...T(),...te(),...se(),...ne()}});var D=p((yt,ie)=>{ie.exports={Router:({base:r="",routes:t=[]}={})=>({__proto__:new Proxy({},{get:(n,e,s)=>(a,...o)=>t.push([e.toUpperCase(),RegExp(`^${(r+a).replace(/(\/?)\*/g,"($1.*)?").replace(/\/$/,"").replace(/:(\w+)(\?)?(\.)?/g,"$2(?<$1>[^/]+)$2$3").replace(/\.(?=[\w(])/,"\\.")}/*$`),o])&&s}),routes:t,async handle(n,...e){let s,a,o=new URL(n.url);n.query=Object.fromEntries(o.searchParams);for(var[c,i,m]of t)if((c===n.method||c==="ALL")&&(a=o.pathname.match(i))){n.params=a.groups;for(var w of m)if((s=await w(n.proxy||n,...e))!==void 0)return s}}})}});var pe=p((Pt,ce)=>{"use strict";var{Router:Je}=D(),{error:Qe}=W(),Ye=(r={})=>{let{stack:t=!1}=r;return new Proxy(Je(r),{get:(n,e)=>(...s)=>e==="handle"?n[e](...s).catch(a=>Qe(a.status||500,{status:a.status||500,error:a.message,stack:t&&a.stack||void 0})):n[e](...s)})};ce.exports={ThrowableRouter:Ye}});var me=p((jt,le)=>{le.exports={...pe()}});var ue=p((Et,he)=>{var ge=class extends Error{constructor(t=500,n="Internal Error."){super(n),this.name="StatusError",this.status=t}};he.exports={StatusError:ge}});var fe=p((kt,de)=>{de.exports={...ue()}});var _=p((Ct,xe)=>{xe.exports={...K(),...W(),...me(),...fe()}});var v=U(_());var we=U(D()),Re=U(_());function et(r){let{pathname:t}=r,n=(decodeURIComponent(t||"").split("?")[0]||"").replace(/\/$/,"").split("/").pop()||"",{groups:e}=/(?<fileName>([^/]+))(?<extension>(\.(apng|avif|gif|jpg|png|svg|webp|bmp|ico|tif|tiff|jpeg))?)/i.exec(n)||{groups:{fileName:"",extension:""}};return{fileName:e?.fileName||"",extension:e?.extension||""}}var ve={"top-left":"a=top-left",top:"a=top","top-right":"a=top-right",left:"a=left",center:"a=center",right:"a=right","bottom-left":"a=bottom-left",bottom:"a=bottom","bottom-right":"a=bottom-right"},z={contain:"fit=contain",cover:"fit=cover",fill:"fit=fill",inside:"fit=inside",outside:"fit=outside"},F={jpg:"output=jpg",jpeg:"output=jpg",png:"output=png",tiff:"output=tiff",gif:"output=gif",webp:"output=webp",auto:"output=webp (if supported)"},P={w:{regex:"(?:width|w)=[0-9.-]+",title:"Width",example:"w=250",section:"Resize",sectionLink:"https://images.weserv.nl/docs/size.html",docs:"https://images.weserv.nl/docs/size.html#width"},h:{regex:"(?:height|h)=[0-9.-]+",title:"Height",example:"h=150",docs:"https://images.weserv.nl/docs/size.html#height"},we:{regex:"we",title:"Without Enlargement",example:"we",docs:"https://images.weserv.nl/docs/fit.html#without-enlargement"},dpr:{regex:"dpr=[0-9]+",title:"Device Pixel Ratio",docs:"https://images.weserv.nl/docs/size.html#device-pixel-ratio",example:"dpr=2"},ro:{regex:"ro=[0-9.-]+",title:"Rotate",example:"ro=45",docs:"https://images.weserv.nl/docs/orientation.html#ro"},flip:{regex:"flip",title:"Flip",example:"flip",note:"",docs:"https://images.weserv.nl/docs/orientation.html#flip"},flop:{regex:"flop",title:"Flop",example:"flop",note:"",docs:"https://images.weserv.nl/docs/orientation.html#flop"},il:{regex:"il",title:"Interlaced/Progressive",example:"il",section:"Optimization/Conversion",sectionLink:"https://images.weserv.nl/docs/format.html#adaptive-filter"},af:{regex:"af",title:"Adaptative Filter",docs:"https://images.weserv.nl/docs/format.html#adaptive-filter",example:"af"},q:{regex:"(?:q|quality)=[0-9.]+",title:"Quality",docs:"https://images.weserv.nl/docs/format.html#quality",example:"q=80"},l:{regex:"l=[0-9]",title:"Compression Level",docs:"https://images.weserv.nl/docs/format.html#compression-level",example:"l=6"},n:{regex:"n=[0-9]+",title:"Number of Pages",docs:"https://images.weserv.nl/docs/format.html#number-of-pages",example:"n=0"},page:{regex:"page=[0-9]+",title:"Page",docs:"https://images.weserv.nl/docs/format.html#page",example:"page=1"},output:{regex:"(?:output|format)=(?:auto|json|png|jpg|gif|tiff|webp|jpeg)",title:"Output",docs:"https://images.weserv.nl/docs/format.html#output",example:"output=png"},cw:{regex:"cw=[0-9]+",title:"Crop width",example:"cw=200",section:"Crop",sectionLink:"https://images.weserv.nl/docs/crop.html#rectangle-crop"},ch:{regex:"ch=[0-9]+",title:"Crop height",example:"ch=100"},cx:{regex:"cx=[0-9]+",title:"Crop x",example:"cx=10"},cy:{regex:"cy=[0-9]+",title:"Crop y",example:"cy=10"},a:{regex:"a=[a-z-]+",title:"Alignment",example:"a=center",docs:"https://images.weserv.nl/docs/crop.html#alignment-position"},precrop:{regex:"precrop",title:"Crop applied before resizing",example:"precrop"},cbg:{regex:"cbg=[a-z0-9A-Z]+",title:"Background Color",example:"cbg=AA00CC",note:'Applies to "cropped" space when fit=Contain'},trim:{regex:"trim(?:=[0-9]+)?",title:"Trim",example:"trim",docs:"https://images.weserv.nl/docs/crop.html#trim"},con:{regex:"con=[0-9]+",title:"Contrast",example:"con=3",section:"Filters",note:""},bg:{regex:"bg=[a-z0-9A-Z]+",title:"Background Color",docs:"https://images.weserv.nl/docs/adjustment.html#background",example:"bg=CCAA00",note:""},blur:{regex:"blur(?:=[0-9]+)?",title:"Blur",example:"blur=2",docs:"https://images.weserv.nl/docs/adjustment.html#blur",note:""},filt:{regex:"filt=[a-z]+",title:"Filter",example:"filt=sepia",note:""},fit:{regex:"fit=(?:contain|cover|fill|inside|outsize)",title:"Fit",docs:"https://images.weserv.nl/docs/fit.html#inside",example:"fit=contain",note:""},gam:{regex:"gam=[0-9.-]+",title:"Gamma",example:"gam=1",docs:"https://images.weserv.nl/docs/adjustment.html#gam",note:""},hue:{regex:"hue=[0-9.-]+",title:"Hue",example:"hue=180",docs:"https://images.weserv.nl/docs/adjustment.html#hue",note:""},mod:{regex:"mod=[0-9.-]+",title:"Brightness",example:"mod=2",docs:"https://images.weserv.nl/docs/adjustment.html#mod",note:""},sat:{regex:"sat=[0-9.-]+",title:"Saturation",example:"sat=50",docs:"https://images.weserv.nl/docs/adjustment.html#sat",note:""},sharp:{regex:"sharp(?:=[0-9]+)?",title:"Sharpen",docs:"https://images.weserv.nl/docs/adjustment.html#sharpen",example:"sharp=2",note:""},tint:{regex:"tint=[a-z0-9A-Z]+",title:"Tint",example:"tint=red",docs:"https://images.weserv.nl/docs/adjustment.html#tint",note:""}},be={vw:{title:"viewport width",regex:"vw(=[0-9.]+)?"},vh:{title:"viewport height",regex:"vh(=[0-9.]+)?"},dpr:{title:"Device Pixel Ratio",regex:"dpr",note:"Passing `dpr` without value will use hinted DPR from client"}},tt=Object.keys(P).concat(Object.keys(F),Object.keys(ve),Object.keys(z),Object.keys(be),["http","https"]),rt=Object.values(P).map(r=>r.regex).concat(Object.values(be).map(r=>r.regex),Object.keys(z),Object.keys(F),["http","https","_"]).join("|"),st=`(?<transformations>(_?(${tt.join("|")})?(=[^:,_/]*)*)+)`,ye=`(?<transformations>((${rt})([_,;:]\\1)*)+)`,Pe="(?<originhost>(self|([a-z0-9:@_-]+)(\\.[a-z0-9_-]+){1,2}(\\.[a-z0-9_-]+)?(\\:\\d+)?))",L="(?<pathname>(.*))",x=class{constructor(t){let n=(t||{}).DEBUG?console.log.bind("ResizerRouter:"):()=>null,e={fit:"contain",n:"-1",maxage:t.MAX_AGE||"1y"},s=(0,we.Router)({base:t.ROUTE_PREFIX||t.base,routes:[["GET",x.transformationsGroupRegex,[x.handleMatchingRoute(n,e)]],["GET",x.transformationsGroupOldRegex,[x.handleMatchingRoute(n,e)]],["GET",x.transformationsGroupNoDomainRegex,[x.handleMatchingRoute(n,e)]]]});return s.get("favicon*",a=>new Response(j(),{headers:{"X-Requested":a.url}})),this.handle=(a,o)=>s.handle(a,o),new Proxy(s,{get:(a,o)=>(...c)=>o==="handle"?a.get("*",i=>i.headers.get("referer")?.includes("favicon.ico")?new Response(null,{status:204}):(console.log({resizeRouterCatchAll:i.url}),fetch(i))).handle(...c):a[o](...c)})}static handleMatchingRoute(t=(...e)=>e,n={fit:"contain",n:"-1",maxage:"1y"}){return(e,s)=>{let a=new URL(e.url),o=t;e.params=e.params||{},e.params.origin=a.origin,e.params.dummyhost&&(e.params.pathname=`${e.params.dummyhost}/${e.params.pathname}`,e.params.originhost=a.host),(["self","0.0"].includes(e.params.originhost)||e.params.originhost.length<4)&&(e.params.originhost=a.host);try{o({originhost:e.params.originhost,pathname:e.params.pathname,transformations:e.params.transformations});let c=new URLSearchParams(e.params.transformations.replace(/[+_/,]/g,"&"));for(let[i,m]of a.searchParams.entries())c.set(i,m);return e.params=x.normalizeRequestParams(e,c),e.params.defaults=n,e.params.protocol=e.params.protocol||"https",e.params.originhost?at(e,s,o):Promise.resolve((0,Re.json)(e.params))}catch(c){return console.error(c),Promise.resolve(new Response(c.message,{status:500}))}}}static normalizeRequestParams(t,n){let e=t.params;e.discarded={},e.transforms={};for(let[s,a]of n.entries())s=s.replace("format","output").replace("width","w").replace("height","h").replace("quality","q"),["http","https"].includes(s)?e.protocol=s:Object.keys(P).includes(s)?e.transforms[s]=a??!0:Object.keys(F).includes(s)?e.transforms.output=s:Object.keys(z).includes(s)?e.transforms.fit=s:Object.keys(ve).includes(s)?e.transforms.a=s:e.discarded[s]=a;if(e.transforms.dpr===""&&t.headers.has("dpr")&&(e.transforms.dpr=String(Number(t.headers.get("dpr"))||1)),e.transforms.trim===""&&(e.transforms.trim="10"),e.discarded.vw!==void 0){let s=Number(t.headers.get("viewport-width")||t.headers.get("sec-ch-viewport-width")||t.headers.get("sec-ch-width")||t.headers.get("width"));if(s||!isNaN(s)){let a=Number(e.discarded.vw)||1;a=Math.min(0,Math.max(1,a)),e.transforms.w=String(Math.ceil(a*s))}}if(e.discarded.vh!==void 0){let s=Number(t.headers.get("sec-ch-viewport-height"));if(s&&!isNaN(s)){let a=Number(e.discarded.vh)||1;a=Math.min(0,Math.max(1,a)),e.transforms.h=String(Math.ceil(a*s))}}return e}},b=x;b.transformationsGroupRegex=new RegExp(`/${ye}/(https?://)?${Pe}/${L}`),b.transformationsGroupOldRegex=new RegExp(`/${st}/(https?://)?${Pe}/${L}`),b.transformationsGroupNoDomainRegex=new RegExp(`/${ye}/(?<dummyhost>([a-z0-9_-][^/]*))/${L}`);function j(){return`<?xml version="1.0" encoding="UTF-8"?>
<svg width="50.8mm" height="49.98mm" viewBox="0 0 180 177.1" xmlns="http://www.w3.org/2000/svg">
<g transform="matrix(3.9212 0 0 3.9212 6182.7 1395.7)">
<rect x="-1574" y="-353.15" width="40.331" height="39.59" rx="2.5955" ry="2.5955" fill="#e0ffff" opacity=".857" stroke="#0063bb" stroke-linejoin="round" stroke-width="2.7109"/>
<text x="-1553.8228" y="-341.6825" fill="#171e31" font-family="sans-serif" font-size="9.5981px" font-weight="bold" letter-spacing="0px" stroke-width=".39821" text-anchor="middle" word-spacing="0px" style="font-feature-settings:normal;font-variant-caps:normal;font-variant-ligatures:normal;font-variant-numeric:normal;line-height:1.25" xml:space="preserve"><tspan x="-1553.8228" y="-341.6825" text-align="center">CTOhm</tspan><tspan x="-1553.8228" y="-329.68481" text-align="center">Edge</tspan><tspan x="-1553.8228" y="-317.68713" text-align="center">Resizer</tspan></text>
</g>
</svg>`}async function at(r,t,n){let{transforms:e,defaults:s,discarded:a,originhost:o,protocol:c,pathname:i,origin:m}=r.params||{},{maxage:w,...l}=s,u=new URL(r.url);u.pathname=i,u.host=o;let E=r.headers.get("accept")||"",k=r.headers.get("Sec-Fetch-Dest")||"",{fileName:C,extension:S}=et(u),O=u.searchParams.has("nocache"),R=`${u.hostname}${u.pathname}`,g=new URL("https://images.weserv.nl/"),h={...l,...e};if(E.includes("webp")&&h.output==="auto")h.output="webp";else if(!["tiff","gif","png","jpg","jpeg","webp","json"].includes(h.output)){let{output:d,...f}=h;n(d),h=f}h.output&&(h.output=h.output.replace("jpeg","jpg"));for(let[d,f]of Object.entries(h))g.searchParams.set(d,f);g.searchParams.sort();let je=Object.entries(Object.fromEntries(g.searchParams)).map(([d,f])=>`${d}=${f}`).sort().join("_"),$=Object.entries(a).map(([d,f])=>`${d}=${f}`).sort().join("&"),y=`${m}/${je}/${o}/${i}`;return $!==""&&(y=[y,decodeURIComponent($)].join("?")),R=decodeURIComponent(R),g.searchParams.set("url",R),ot({canonicalVariationURL:y,weservUrl:g,skipCache:O,fetchDest:k,debug:n}).catch(d=>{if(n({errMessage:d.message,skipCache:O,fileName:C,extension:S,computedSearchParams:h,discarded_entries:$,canonicalVariationURL:y,protocol:c,fetchDest:k,urlParam:R}),["https","ssl"].includes(c)&&g.searchParams.set("url",`ssl:${R}`),g.searchParams.set("filename",C),h.output&&h.output!==S){let A=C.replace(`${S}`,`${h.output}`);g.searchParams.set("filename",A)}if(g.searchParams.set("maxage",w),g.searchParams.sort(),O&&g.searchParams.set("maxage","1d"),$!=="")for(let[A,Te]of Object.entries(a))g.searchParams.set(A,Te);let f=g.toString().replace(/%2C/g,","),{accept:Ee,"accept-encoding":ke,"accept-language":Ce,"user-agent":Se,"cache-control":$e}=Object.fromEntries(r.headers.entries());return nt(new Request(f,{headers:{fileName:C,accept:Ee,"accept-encoding":ke,"accept-language":Ce,"user-agent":Se,"cache-control":$e,"x-er-source-url":`https://${R}`,"x-er-input-extension":S,"x-er-canonical-variation-url":y}}),t,n).catch(()=>fetch(`https://${R}`))})}async function nt(r,t,n){let e=await fetch(r),s=e.headers.get("Content-Type")||"";if(!e.ok||!s.startsWith("image"))return console.warn({ok:e.ok,contentType:s,statusText:e.statusText,status:e.status}),e;let a=r.headers.get("x-er-canonical-variation-url"),o=r.headers.get("fileName"),c=r.headers.get("x-er-source-url"),i=r.headers.get("x-er-input-extension")||o?.split(".").pop()||"",m=r.url;console.info({canonicalVariationURL:a,weserveUrlStr:m,sourceUrl:c,fileName:o});let w=s.split("/").pop()?.replace("jpeg","jpg"),l=new Response(e.body,e),u=["Viewport-Height","Sec-CH-Viewport-Height","Viewport-Width","Sec-CH-Viewport-Width","DPR","Sec-CH-DPR","Width","Sec-CH-Width"].join(", ");l.headers.set("Accept-CH",u),l.headers.set("Vary",`${u}, Accept, Accept-Encoding`),l.headers.delete("cf-cache-status"),l.headers.set("Cache-Control","public, max-age="+String(31536e3)),l.headers.set("x-er-cached-On",String(Date.now())),l.headers.set("last-modified",new Date(Date.now()-18e4).toUTCString()),c&&l.headers.set("x-er-source-url",c),l.headers.set("x-er-weserve-url",m),o&&l.headers.set("Content-Disposition",`inline; filename = ${decodeURIComponent(o.replace(i,w||i)).trim()} `);let E=a?new Request(a):r;l.headers.set("link",`<${E.url}>; rel = "canonical"`);let k=caches.default;return n({cacheHit:!1,contentType:s,sourceUrl:c,weserveUrlStr:m,fileName:o,canonicalVariationURL:a}),t.waitUntil(k.put(E,l.clone())),l}async function ot({canonicalVariationURL:r,weservUrl:t,skipCache:n,debug:e}){if(n)return Promise.reject(new Error("skipping cache"));let s=await caches.default.match(new Request(r));if(!s)return Promise.reject(new Error("variation not cached"));if(!s.ok)return Promise.reject(new Error(s.statusText));let a=s.headers.get("Content-Type")||"";if(!a.startsWith("image/"))return Promise.reject(new Error("non-image contentType: "+a));let o=s.headers.get("x-er-cached-on")||String(Date.now()),c=s.headers.get("x-er-source-url")||decodeURIComponent(`https://${t.searchParams.get("url")}`),i=decodeURIComponent(s.headers.get("x-er-weserve-url")||t.toString()),m=s.headers.get("Content-Disposition"),w=s.headers.get("link"),l=Math.ceil((Date.now()-Number(o))/1e3);return e({cacheHit:!0,contentType:a,ageSeconds:l,cachedSourceUrl:c,cachedWeserveurl:i,cachedContentDisposition:m,cachedLink:w}),s}function it({vw:r,vh:t,dpr:n,webp:e}){return new Response(`<?xml version="1.0" encoding="UTF-8"?>
<svg width="300px" height="100px" viewBox="0 0 300 100" xmlns="http://www.w3.org/2000/svg">
<rect x="5" y="5" width="280" height="90" rx="2.5955" ry="2.5955" fill="#e0ffff" opacity=".857" stroke="#0063bb" stroke-linejoin="round" stroke-width="2.7109"/>
<text x="0" y="50" fill="#171e31" font-family="sans-serif" font-size="12px"  letter-spacing="0px" stroke-width=".39821" text-anchor="left" 
  xml:space="preserve">
<tspan x="10" y="25" text-align="center">Detected Viewport Width: ${r}</tspan>
<tspan x="10" y="45" text-align="center">Detected Viewport Height: ${t}</tspan>
<tspan x="10" y="65" text-align="center">Detected DPR : ${n}</tspan>
<tspan x="10" y="85" text-align="center">Webp Support: ${e?"yes":"nope"}</tspan>
</text>

</svg>`)}function ct(r){let t=Number(r.headers.get("viewport-width")||r.headers.get("sec-ch-viewport-width")||r.headers.get("sec-ch-width")||r.headers.get("width"))||"N/A",n=Number(r.headers.get("sec-ch-viewport-height"))||"N/A",e=Number(r.headers.get("dpr")||r.headers.get("sec-ch-dpr"))||"N/A",s=r.headers.get("accept")?.includes("webp")?"yes":"nope",a=encodeURIComponent(`000?text=Viewport-Height:+${t}%0AViewport-Width:+${n}%0ADPR:+${e}%0AWebp%20support:+${s}&font_size=21&font=museo`),o=`https://resizer.pictures/auto_dpr/fakeimg.pl/300x145/fff/${a}`;return console.log({requested:o}),fetch(o).then(c=>c.ok?c:(0,v.json)(Object.fromEntries(c.headers)))}var pt=(r="")=>`/${r.replace(/^\/?(.*?)\/?$/g,"$1")}`.replace(/^\/$/,""),Ut={fetch:async(r,t,n)=>{let e=pt(t.ROUTE_PREFIX),s=new URL(r.url),a={ROUTE_PREFIX:`${e}/`,DEBUG:t.DEBUG||s.searchParams.has("debug")},o=new b(a);return o.all("*",i=>i.headers.get("referer")?.includes("favicon.ico")?new Response(j()):(console.log({resizerRoutercatchAll:i.url}),t.ASSETS.fetch(i))),(0,v.ThrowableRouter)({base:""}).get("/favicon*",()=>new Response(j())).get("/version",()=>(0,v.json)({worker:"@ctohm/edge-resizer",debug:t.DEBUG,release:t.RELEASE,env:t.WORKER_ENV,timestamp:t.TIMESTAMP,deployed_at:new Date(1e3*Number(t.TIMESTAMP)).toISOString(),route_prefix:e})).get("/transforms",()=>(0,v.json)({AvailableTransforms:P})).get("/detected_features",i=>ct(i)).get(`${e}/*`,o.handle).get("/detected_features/:webp/:vw/:vh/:dpr",i=>it(i.params)).all("*",i=>i.headers.get("referer")?.includes("favicon.ico")?new Response(j()):t.ASSETS.fetch(i)).handle(r,n).catch(i=>{let m={error:i.message,stack:(i.stack||"").split(`
`)};return console.warn(m),(0,v.json)(m)})}};export{Ut as default};
//# sourceMappingURL=data:application/json;base64,
