import{_ as o,r as i,c as n,e as s,w as a,b as e,d as t,a as h,o as c}from"./app.2733a36c.js";const V='{"title":"\u26F3 Use Cases","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u26F3 Use Cases","slug":"\u26F3-use-cases"},{"level":3,"title":"Stripping the searchParams","slug":"stripping-the-searchparams"},{"level":2,"title":"Worker and image in the same host","slug":"worker-and-image-in-the-same-host"}],"relativePath":"use_cases.md","lastUpdated":1639962934403}',p={},l=e("h2",{id:"\u26F3-use-cases",tabindex:"-1"},[t("\u26F3 Use Cases "),e("a",{class:"header-anchor",href:"#\u26F3-use-cases","aria-hidden":"true"},"#")],-1),u=e("h3",{id:"stripping-the-searchparams",tabindex:"-1"},[t("Stripping the searchParams "),e("a",{class:"header-anchor",href:"#stripping-the-searchparams","aria-hidden":"true"},"#")],-1),d=e("p",null,": this worker is all about tidy URLs. There was a particular situation for which having clean urls was crucial.",-1),m=e("p",null,[t("So... "),e("strong",null,"Story time")],-1),g=e("blockquote",null,[e("p",null,"It turns out I had a mobile app in whose banner Google Play and App Store were promoted, side to side.")],-1),_=e("code",null,"https://resizer.pictures/_/riff.one/images/banner_lysto.png",-1),f=e("p",null,[t("It turns out this was an "),e("em",null,"unforgivable sin"),t(", for which the app was stopped from publishing further updates.")],-1),w=e("hr",null,null,-1),b=e("p",null,"Technically, it should have been as easy as modifying all banners using query string parameters. Don't you think?",-1),k=e("code",null,"https://resizer.pictures/_/riff.one/images/banner_lysto.png?ch=250",-1),y=e("p",null,"But we were dealing with an automated image verification system, which outright dismissed the searchstring altogether.",-1),v=e("p",null,"By implementing our current routing logic that encodes the query parameters as part of the pathname, we achieved an output with a clean URL that the robot found to be fully compliant.",-1),z=e("code",null,"https://resizer.pictures/ch=250/riff.one/images/banner_lysto.png",-1),q=h('<h2 id="worker-and-image-in-the-same-host" tabindex="-1">Worker and image in the same host <a class="header-anchor" href="#worker-and-image-in-the-same-host" aria-hidden="true">#</a></h2><p>If the original image was in the same zone as the worker, eg:</p><blockquote><p><a href="https://resizer.pictures/images/cloudflare_workers.svg" target="_blank" rel="noopener noreferrer">https://resizer.pictures/images/cloudflare_workers.svg</a></p></blockquote><p>Normally, a thumbnail URL should contain the source host</p><blockquote><p><a href="https://resizer.pictures/w=200_h=200/resizer.pictures/images/cloudflare_workers.svg" target="_blank" rel="noopener noreferrer"><em>https://</em> resizer.pictures/<em>w=200_h=200</em>/resizer.pictures/<em>images/cloudflare_workers.svg</em></a></p></blockquote><p>Which would be parsed as</p><table><thead><tr><th>zone</th><th>t. params</th><th>source host</th><th>source pathname</th></tr></thead><tbody><tr><td>resizer.pictures/</td><td><em>w=200_h=200</em></td><td>/resizer.pictures</td><td>/images/cloudflare_workers.svg</td></tr></tbody></table><p>In case you wanted to avoid repeating the hostname, there are two workarounds that you can try:</p><h4 id="option-1-skip-the-source-hostname-entirely-and-hope-for-the-best" tabindex="-1"><strong>Option 1</strong>. Skip the source hostname entirely and hope for the best <a class="header-anchor" href="#option-1-skip-the-source-hostname-entirely-and-hope-for-the-best" aria-hidden="true">#</a></h4><p>The following URL yields the same result as the long one above.</p><blockquote><p><a href="https://resizer.pictures/w=200/images/cloudflare_workers.svg" target="_blank" rel="noopener noreferrer">https://resizer.pictures/w=200/images/cloudflare_workers.svg</a></p></blockquote><p>Internally, the router cannot detect a valid source hostname in there, but its second best choice is taking <code>images</code> as a dummy source hostname and replace it with the origin host in the next step.</p><p>However, <strong>this won&#39;t work if you try to proxy an image in the zone&#39;s root folder</strong>. There&#39;s simply not enough &quot;parts&quot; to parse and route</p><blockquote><p>This one won&#39;t work. <a href="https://resizer.pictures/w=200/favicon.svg" target="_blank" rel="noopener noreferrer">https://resizer.pictures/w=200/favicon.svg</a></p></blockquote><p>In that case, use option 2.</p><h4 id="option-2-use-0-0-as-dummy-hostname" tabindex="-1"><strong>Option 2</strong>. Use <code>0.0</code> as dummy hostname: <a class="header-anchor" href="#option-2-use-0-0-as-dummy-hostname" aria-hidden="true">#</a></h4><p>We use a simplified regex to identify the source image hostname as such. Since there are no hostnames shorter than 4 characters (<code>g.cn</code>) passing <code>0.0</code> or <code>x.x</code> as a dummy hostname will satisfy the route pattern and, at the same time, its length will prompt us to replace the dummy with the current request origin. Therefore:</p><blockquote><p><a href="https://resizer.pictures/w=200_h=200/0.0/favicon.svg" target="_blank" rel="noopener noreferrer"><em>https://</em> resizer.pictures/<em>w=200_h=200</em>/0.0/<em>favicon.svg</em></a></p></blockquote><p>is translated to</p><blockquote><p><a href="https://resizer.pictures/w=200_h=200/resizer.pictures/images/cloudflare_workers.svg" target="_blank" rel="noopener noreferrer"><em>https://</em> resizer.pictures/<em>w=200_h=200</em>/resizer.pictures/<em>images/cloudflare_workers.svg</em></a></p></blockquote>',20);function x(T,S,I,U,C,N){const r=i("labeled-image");return c(),n("div",null,[l,u,d,m,g,s(r,{src:"https://resizer.pictures/_/riff.one/images/banner_lysto.png"},{default:a(()=>[_]),_:1}),f,w,b,s(r,{src:"https://resizer.pictures/_/riff.one/images/banner_lysto.png?ch=250"},{default:a(()=>[k]),_:1}),y,v,s(r,{src:"https://resizer.pictures/ch=250/riff.one/images/banner_lysto.png"},{default:a(()=>[z]),_:1}),q])}var B=o(p,[["render",x]]);export{V as __pageData,B as default};
