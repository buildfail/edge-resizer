import{_ as e,c as a,o as s,a as n}from"./app.2733a36c.js";const f='{"title":"\u{1F50C} Routing Strategy","description":"","frontmatter":{},"headers":[{"level":3,"title":"1. Transformations are mandatory","slug":"_1-transformations-are-mandatory"},{"level":3,"title":"2. Using prefixes or namespaces","slug":"_2-using-prefixes-or-namespaces"},{"level":3,"title":"3. Protocol is optional","slug":"_3-protocol-is-optional"},{"level":3,"title":"4. Source host on the same zone","slug":"_4-source-host-on-the-same-zone"},{"level":3,"title":"5. Alternative transformation separators","slug":"_5-alternative-transformation-separators"}],"relativePath":"routing.md","lastUpdated":1639962934399}',t={},o=n(`<h1 id="\u{1F50C}-routing-strategy" tabindex="-1">\u{1F50C} Routing Strategy <a class="header-anchor" href="#\u{1F50C}-routing-strategy" aria-hidden="true">#</a></h1><p>Given a source image URL, visible to cloudflare and <a href="http://images.weserve.nl" target="_blank" rel="noopener noreferrer">images.weserve.nl</a>:</p><blockquote><p><strong><a href="https://riff.one/designcue-unsplash.jpg" target="_blank" rel="noopener noreferrer">https://riff.one/designcue-unsplash.jpg</a></strong></p></blockquote><p>If you wanted to generate a 300x200 thumbnail, on the fly, you would request</p><blockquote><p><strong><a href="https://resizer.pictures/w=300_h=200/riff.one/designcue-unsplash.jpg" target="_blank" rel="noopener noreferrer">https://resizer.pictures/w=300_h=200/riff.one/designcue-unsplash.jpg</a></strong></p></blockquote><p>(I&#39;m using our hostname just for the example). Edge Resizer parses the pathname as:</p><table><thead><tr><th><code>{transformations}</code></th><th><code>/{source hostname}</code></th><th><code>/{source pathname}</code></th></tr></thead><tbody><tr><td><code>w=300_h=200/</code></td><td><code>riff.one</code></td><td><code>/designcue-unsplash.jpg</code></td></tr></tbody></table><p>In this section we&#39;ll explain the logic and constraints that define if a request will be handled (and therefore if the underlying image will be proxied) or it will pass through unaltered.</p><h3 id="_1-transformations-are-mandatory" tabindex="-1">1. Transformations are mandatory <a class="header-anchor" href="#_1-transformations-are-mandatory" aria-hidden="true">#</a></h3><p>Edge resizer will only proxy those routes whose pathname matches the <a href="./parameters.html">pattern of available transformations</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you don&#39;t want to apply any transformation, but still want Edge-Resizer handle the route (for example, for caching or to avoid mixed content) pass an underscore as dummy transform:</p><div class="language-erlang"><pre><code><span class="token atom">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token atom">resizer</span><span class="token punctuation">.</span><span class="token atom">pictures</span><span class="token operator">/</span><span class="token variable">_</span><span class="token operator">/</span><span class="token atom">riff</span><span class="token punctuation">.</span><span class="token atom">one</span><span class="token operator">/</span><span class="token atom">img</span><span class="token operator">/</span><span class="token atom">dice</span><span class="token punctuation">.</span><span class="token atom">png</span>
</code></pre></div></div><hr><h3 id="_2-using-prefixes-or-namespaces" tabindex="-1">2. Using prefixes or namespaces <a class="header-anchor" href="#_2-using-prefixes-or-namespaces" aria-hidden="true">#</a></h3><p>Whatever comes <em>before</em> the transformations segment is not considered to compute the source image, so it&#39;s safe to deploy Edge Resizer on particular routes instead of <code>*</code>. Any of the following would have Edge Resizer handle the request and yield the same thumbnail:</p><blockquote><p><a href="https://resizer.pictures/w=300_h=200/riff.one/designcue-unsplash.jpg" target="_blank" rel="noopener noreferrer"><em>https://resizer.pictures</em>/w=300_h=200/<em>riff.one/designcue-unsplash.jpg</em></a></p><p><a href="https://resizer.pictures/thumbnails/w=300_h=200/riff.one/designcue-unsplash.jpg" target="_blank" rel="noopener noreferrer"><em>https://resizer.pictures</em>/thumbnails/w=300_h=200/<em>riff.one/designcue-unsplash.jpg</em></a></p><p><a href="https://resizer.pictures/foo/bar/w=300_h=200/riff.one/designcue-unsplash.jpg" target="_blank" rel="noopener noreferrer"><em>https://resizer.pictures</em>/foo/bar/w=300_h=200/<em>riff.one/designcue-unsplash.jpg</em></a></p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This is particularly useful to avoid Edge Resizer being used blindly across all the zone, and instead restrict its operation to specific namespaces or prefixes.</p></div><h3 id="_3-protocol-is-optional" tabindex="-1">3. Protocol is optional <a class="header-anchor" href="#_3-protocol-is-optional" aria-hidden="true">#</a></h3><p>To compute the source hostname, it&#39;s indifferent to Edge Resizer if you pass the protocol in the URL. The following are equivalent:</p><blockquote><p><a href="https://resizer.pictures/w=300_h=200/riff.one/designcue-unsplash.jpg" target="_blank" rel="noopener noreferrer"><em>https://resizer.pictures/w=300_h=200</em>/riff.one/<em>designcue-unsplash.jpg</em></a></p><p><a href="https://resizer.pictures/w=300_h=200/https://riff.one/designcue-unsplash.jpg" target="_blank" rel="noopener noreferrer"><em>https://resizer.pictures/w=300_h=200</em>/https://riff.one/<em>designcue-unsplash.jpg</em></a></p></blockquote><h3 id="_4-source-host-on-the-same-zone" tabindex="-1">4. Source host on the same zone <a class="header-anchor" href="#_4-source-host-on-the-same-zone" aria-hidden="true">#</a></h3><p>If the original image was in the same zone as the worker, eg:</p><blockquote><p><a href="https://resizer.pictures/images/cloudflare_workers.svg" target="_blank" rel="noopener noreferrer">https://resizer.pictures/images/cloudflare_workers.svg</a></p></blockquote><p>Wouldn&#39;t it be nice if we could save us some keystrokes and avoid having to type the hostname twice as in</p><blockquote><p><a href="https://resizer.pictures/w=200_h=200/resizer.pictures/images/cloudflare_workers.svg" target="_blank" rel="noopener noreferrer"><em>https://</em> resizer.pictures/<em>w=200_h=200</em>/resizer.pictures/<em>images/cloudflare_workers.svg</em></a></p></blockquote><p>Sure, you can. See <a href="./use_cases.html#worker-and-image-in-the-same-host">Worker and image in the same host</a></p><hr><h3 id="_5-alternative-transformation-separators" tabindex="-1">5. Alternative transformation separators <a class="header-anchor" href="#_5-alternative-transformation-separators" aria-hidden="true">#</a></h3><p>As mentioned, underscores are used as separators to compute which transformations were requested:</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/w=300_h=250_fit=cover/https://riff.one/designcue-unsplash.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>However, the router will also accept commas as separators because... why not?</p><div class="language-erlang"><pre><code><span class="token operator">/</span><span class="token atom">w</span><span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token atom">h</span><span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token atom">fit</span><span class="token operator">=</span><span class="token atom">cover</span><span class="token operator">/</span><span class="token atom">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token atom">riff</span><span class="token punctuation">.</span><span class="token atom">one</span><span class="token operator">/</span><span class="token atom">designcue</span><span class="token operator">-</span><span class="token atom">unsplash</span><span class="token punctuation">.</span><span class="token atom">jpg</span>
</code></pre></div><p>You would notice this format is somewhat similar to <a href="https://developers.cloudflare.com/images/image-resizing/url-format" target="_blank" rel="noopener noreferrer">Cloudflare Image Resizing</a>&#39;s:</p><div class="language-erlang"><pre><code><span class="token operator">/</span><span class="token atom">cdn</span><span class="token operator">-</span><span class="token atom">cgi</span><span class="token operator">/</span><span class="token atom">image</span><span class="token operator">/</span><span class="token atom">w</span><span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token atom">h</span><span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token atom">fit</span><span class="token operator">=</span><span class="token atom">cover</span><span class="token operator">/</span><span class="token atom">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token atom">riff</span><span class="token punctuation">.</span><span class="token atom">one</span><span class="token operator">/</span><span class="token atom">designcue</span><span class="token operator">-</span><span class="token atom">unsplash</span><span class="token punctuation">.</span><span class="token atom">jpg</span>
</code></pre></div><p>Well yes, this enables (to a very limited extent) switching back and forth between Edge-Resizer and Cloudflare Image Resizing. In the same line we support aliasing <code>w</code> as <code>width</code>, <code>h</code> as <code>height</code>, <code>q</code> as <code>quality</code> and <code>output</code> as <code>format</code>. However, no further efforts are planned to extend this syntax compatibility, and it&#39;s not feasible to think about feature parity since even operations that existing both in <a href="https://developers.cloudflare.com/images/image-resizing/url-format" target="_blank" rel="noopener noreferrer">Cloudflare Image Resizing</a> and <a href="http://images.weserv.nl" target="_blank" rel="noopener noreferrer">images.weserv.nl</a>, do often expect values from different sets, or have different meanings.</p>`,34),r=[o];function p(i,l,c,u,h,d){return s(),a("div",null,r)}var g=e(t,[["render",p]]);export{f as __pageData,g as default};
